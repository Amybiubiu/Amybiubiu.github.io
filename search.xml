<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[webpack-2]]></title>
    <url>%2F2019%2F08%2F21%2Fwebpack-2%2F</url>
    <content type="text"><![CDATA[开发环境 mode: &#39;development&#39;, devtool: &#39;inline-source-map&#39;,……plugins: [ 使用 source map ，准确地知道错误来自于哪个源文件， watch mode npm run watch 浏览器可自动更新 webpack-dev-server/webpack-dev-middleware 对server.js文件进行配置，npm start 在3000端口运行]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my new post]]></title>
    <url>%2F2019%2F08%2F21%2Fmy-new-post%2F</url>
    <content type="text"></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Games</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack学习笔记]]></title>
    <url>%2F2019%2F08%2F08%2Fwebpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[[TOC]看懂webpack.config.js entry 123module.exports=&#123; entry:'./path/to/my/entry/file.js'&#125;；默认值是./src/index.js;入口起点 output 12345678const path = require('path');module.exports = &#123; entry: './path/to/my/entry/file.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: 'my-first-webpack.bundle.js' &#125;&#125;; path定义导入的模块，filename指bunble生成的名件名称及地址。输出文件默认放入./dist文件夹中 loader loader 能够import任何类型的模块，例如css。 123456789101112const path = require('path');module.exports = &#123; output: &#123; filename: 'my-first-webpack.bundle.js' &#125;, module: &#123; rules: [ &#123; test: /\.txt$/, use: 'raw-loader' &#125; ] &#125;&#125;; “嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 &gt;使用 raw-loader 转换一下。” plugin 12345678910111213const HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装const webpack = require('webpack'); // 用于访问内置插件module.exports = &#123; module: &#123; rules: [ &#123; test: /\.txt$/, use: 'raw-loader' &#125; ] &#125;, plugins: [ new HtmlWebpackPlugin(&#123;template: './src/index.html'&#125;) ]&#125;; 该插件为应用程序生成html文件，并注入所有生成的bundle。 资源管理以加载images图像为例 npm install --save-dev file-loader webpack.config 12345678910111213module.exports = &#123; .... module: &#123; rules: [ &#123; test: /\.(png|svg|jpg|gif)$/, use: [ 'file-loader' &#125; ] &#125;&#125; src/icon.jpg src/index.js 1234567891011121314import _ from 'lodash';import './style.css';import Icon from './icon.png';function component() &#123; var element = document.createElement('div'); // lodash，现在由此脚本导入 element.innerHTML = _.join(['Hello', 'webpack'], ' '); element.classList.add('hello'); var myIcon = new Image(); myIcon.src = Icon; element.appendChild(myIcon); src/style.css 123.hello&#123; background: url('./icon.png');&#125; npm run build 其他加载，css，fonts，data。 管理输出 以下插件/操作均为方便管理dist文件夹，不需要手动更改 动态生成bunble.js文件 1234567891011121314const path = require('path'); module.exports = &#123;- entry: './src/index.js',+ entry: &#123;+ app: './src/index.js',+ print: './src/print.js'+ &#125;, output: &#123;- filename: 'bundle.js',+ filename: '[name].bundle.js', path: path.resolve(__dirname, 'dist') &#125; &#125;; npm install --save-dev html-webpack-plugin 123456789101112131415161718 const path = require('path');+ const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = &#123; entry: &#123; app: './src/index.js', print: './src/print.js' &#125;,+ plugins: [+ new HtmlWebpackPlugin(&#123;+ title: '管理输出'+ &#125;)+ ], output: &#123; filename: '[name].bundle.js', path: path.resolve(__dirname, 'dist') &#125; &#125;; 执行npm run build该插件会默认生成index.html文件，覆盖/更改原index.html文件 npm install --save-dev clean-webpack-plugin 123456+ const CleanWebpackPlugin = require('clean-webpack-plugin');//需改为&#123;CleanWebpackPlugin&#125;,否则会有报错.... plugins: [+ new CleanWebpackPlugin(), 作用为清理dist文件夹中之前生成的不需要的旧文件。这一节管理输出一直有报错，未能正常显示页面 1234567891011121314Uncaught ReferenceError: ducument is not defined at app.bundle.js:9 at Module.&lt;anonymous&gt; (app.bundle.js:9) at r (app.bundle.js:1) at app.bundle.js:1 at app.bundle.js:1(anonymous) @ app.bundle.js:9(anonymous) @ app.bundle.js:9r @ app.bundle.js:1(anonymous) @ app.bundle.js:1(anonymous) @ app.bundle.js:1//浏览器报错Entrypoint undefined = index.html//终端报错，有人说是插件本身的问题 按照官网操作来的，这报错真的不明白，之后再看看怎么解决唔，看看github相关插件的issue 吐血！document拼写错误，见devtool: &#39;inline-source-map&#39;,可跟踪错误至源文件]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
